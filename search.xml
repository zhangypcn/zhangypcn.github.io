<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020我的主机配置分享</title>
    <url>/2020/06/26/My-PC-Config-2020/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>PC</category>
      </categories>
      <tags>
        <tag>PC</tag>
        <tag>电脑硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>过期蓝图是万恶之源</title>
    <url>/2020/04/28/Package-BuildCookRun-Error/</url>
    <content><![CDATA[<p>打包时遇到莫名的问题需要单独排查，首先排查Game模式（Debug/Development）源码编译能否通过，其次检查内容文件，尤其是蓝图，<strong>一些错误的蓝图文件即使项目中没有任何引用，也可以引起致命的错误！</strong></p>
<p>折腾到凌晨的教训，值得一记。</p>
<hr>
]]></content>
      <categories>
        <category>Unreal Engine</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>Error</tag>
        <tag>Package</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4 构建解析——烘培、打包、部署、运行</title>
    <url>/2020/04/28/Package-UAT-BuildCookRun/</url>
    <content><![CDATA[<p>从项目启动器启动配置文件，验证描述文件设置后，首先执行 Launching UAT… ，<strong>UAT</strong> 是UE4在封装过程所使用的自动化工具（Unreal Automation Tool），用于通过各种实用程序脚本来处理 UE4 项目。对于封装过程，UAT使用特定的命令 <strong>BuildCookRun</strong> 来打包项目。</p>
<a id="more"></a>

<p>在启动 UAT 之后经历了编译、烘培、部署、启动、清理几个阶段，这实际上也是中 BuildCookRun 命令的组成部分，具体封装流程为<strong>构建（Build）、转化（Cook）、暂存（Stage）、打包（Package）、部署（deploy）、运行（Run）</strong>。</p>
<ul>
<li>构建（Build）：该阶段将为所选择的平台编译重组文件。</li>
<li>转化（Cook）：该阶段通过在特殊模式下执行编辑器来转化内容。</li>
<li>暂存（Stage）：该阶段将重新文件和内容复制到暂存区，它是开发目录之外的独立目录。</li>
<li>打包（Package）：该阶段将项目打包成平台原生的发行格式。</li>
<li>部署（Deploy）：该阶段将部署版本部署到目标设备。</li>
<li>运行（Run）：该阶段在目标平台上启动已封装的项目。</li>
</ul>
<p>所以，在打包过程中遇到问题，就可以在按以上不同的阶段去分类，从而有目标的解决。</p>
<p>一般情况下，若由于程序的原因打包失败，可以在VS解决方案<strong>Game模式</strong>下（Debug或Development）调试运行来定位问题。</p>
<p>有一些情况下，工程内容中一些<strong>有问题的蓝图文件</strong>没有删除，即使没有引用，也可以引起致命的错误。</p>
<hr>
<p><strong>参考文档</strong></p>
<p><a href="https://docs.unrealengine.com/zh-CN/Engine/Deployment/BuildOperations/index.html" target="_blank" rel="noopener">docs.UnrealEngine: 构建操作：烘焙，打包，部署与运行</a></p>
<hr>
]]></content>
      <categories>
        <category>Unreal Engine</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>Package</tag>
        <tag>BuildCookRun</tag>
        <tag>UAT</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Oculus驱动无法登录问题</title>
    <url>/2020/07/08/Solve-the-Problem-that-Oculus-Driver-Cannot-Login/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Oculus驱动在科学上网后仍无法登录，可以尝试通过更改hosts文件解决。</p>
<a id="more"></a>

<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在hosts文件尾（ <code>C:\Windows\System32\drivers\etc</code> 目录下）添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">157.240.11.49 graph.oculus.com</span><br><span class="line">157.240.11.49 www2.oculus.com</span><br><span class="line">157.240.8.49 scontent.oculuscdn.com</span><br><span class="line">157.240.8.49 securecdn.oculus.com</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oculus</category>
      </categories>
      <tags>
        <tag>Oculus</tag>
        <tag>hosts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/2020/04/06/Test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title>个人网站Hexo源码管理——便于换设备时更新博客</title>
    <url>/2020/07/04/Personal-Website-Hexo-Source-Management/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇记录了我在跟换主力机后，更新博客时发现需要从原来的电脑Copy博客源码，这种行为让我觉得有一丝丝复古，为了避免再次进行这种让人不快的操作，我将网站Hexo源码上传到了GitHub仓库管理，以下记录了操作的流程和细节。</p>
<a id="more"></a>

<h1 id="Hexo源码管理"><a href="#Hexo源码管理" class="headerlink" title="Hexo源码管理"></a>Hexo源码管理</h1><ol>
<li>安装必要环境。如：Git、NodeJS。</li>
</ol>
<blockquote>
<p>如果使用的是新机器，注意在GitHub上添加该设备的SSH Key</p>
<p>NodeJS尽量安装官网首页描述为“推荐给大多数用户”的版本，如：12.18.2LTS，不要安装描述为“最新功能”的版本，如“14.5.0”，否则安装hexo时可能出问题。</p>
</blockquote>
<ol start="2">
<li>原站点仓库新建分支。在部署站点的GitHub仓库（yourgithubusername.github.io）新建分支，如：hexo，并将其设置为<strong>默认分支</strong>。</li>
</ol>
<blockquote>
<p>由于我此时已经更新了一段时间博客，仓库master分支的内容为public目录下的内容，故新建分支hexo的内容也为public目录</p>
</blockquote>
<ol start="3">
<li><p>初次上传源码至远程仓库。本地创建文件夹，使用Git Bash克隆站点的GitHub远程仓库，这时会下载到public目录下的内容，此时删掉除 .git 文件夹以外的所有文件（如果还未更新部署博客忽略此步骤），将旧电脑的Hexo源码，除 .git 和 .deploy_git 文件夹的所有文件复制进来。并且注意删除themes目录使用的网站主题的.git文件，否则影响上传代码，有需要备份即可。最后依次执行以下指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m"添加个人网站源码"</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 <code>git commit</code> 前先配置好git全局邮箱和用户名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">git config --global user.name <span class="string">"yourgithubname"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">git config --global user.email <span class="string">"yourgithubemail"</span></span></span><br></pre></td></tr></table></figure>

<p>上传源码后发现相较于本地的文件，文件夹node_modules、public、文件db.json并未上传至远程仓库，这些文件在执行hexo g -d 指令后会自动生成。</p>
</blockquote>
</li>
<li><p>确认站点配置文件 <code>_config.yml</code> 的<strong>deploy</strong>字段的branch设置为master，这样保证了执行 <code>hexo g -d</code> 时将博客部署至GitHub仓库的主分支上，后续只需使用Git命令手动更新hexo分支即可。</p>
</li>
<li><p>安装hexo，以便使用hexo指令。执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>参考链接</strong></p>
<p><a href="https://www.zhihu.com/question/21193762/answer/103097754" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？ - skycrown的回答 - 知乎</a></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>PixelStreaming 局域网及公有云部署全流程记录</title>
    <url>/2020/04/10/PixelStreaming-Deployment/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇是关于PixelStreaming开发和部署全流程的记录，从开发者角度分析探讨像素流送技术以及部署过程中遇到的问题，希望能为其他开发者带来帮助或者解决实际问题，偶尔也会有补充和更新，希望同样关注PixelStreaming技术的朋友与我交流。</p>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>PixelStreaming自UnrealEngine4.21版本开始提供测试，能够向Web浏览器发送高质量的可视化内容，让移动设备和轻量级Web浏览器能够轻松浏览工作站品质的3D图形。用户通过链接即可访问，并且提供了多人同时访问或单人独立访问的自由部署方案，将像素流送项目部署在云平台服务器上，在高性能、高负载的云计算平台以及高速率、低延迟的5G技术的支持下，实现多人、异地、多终端的远程协同。</p>
<p>PixelStreaming技术可以为汽车制造商以及经销商提供一种通用的线上展厅解决方案，为汽车客户带来方便快捷的高质量汽车交互体验。以此解决方案为思路，可拓展至工业产品研发过程中，对工业数据进行3D可视化，创建交互式内容，以进行不同角色的设计人员在异地辅助决策，缩短产品设计和评审时间，从而减少产品研发过程中的资金及时间成本，显著提高工作效率。另外在智慧城市、智慧交通、数字地产等行业，PixelStreaming也有很大的用武之地。</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><h2 id="UE4-24以前版本"><a href="#UE4-24以前版本" class="headerlink" title="UE4.24以前版本"></a>UE4.24以前版本</h2><p>UE4.24版本之前，PixelStreaming通过配置PixelStreaming插件、WebRTC代理服务器、Signaling和Web服务器来工作。</p>
<p><strong>PixelStreaming插件</strong>：负责视频编码，将视频与音频压缩到媒体流中，并发送到WebRTC代理服务器。</p>
<p><strong>WebRTC代理服务器</strong>：负责将像素流送插件产生的媒体流通过直接的点对点连接转发给查看者。</p>
<p><strong>Signaling和Web服务器</strong>：负责在查看者和WebRTC代理服务器之间建立连接，为查看者提供播放媒体流内容的HTML和JavaScript环境。</p>
<p><img src="/2020/04/10/PixelStreaming-Deployment/PixelStreamingFramework.jpg" alt="PixelStreamingFramework" title="4.21 PixelStreaming原理"> </p>
<h2 id="UE4-24之后版本"><a href="#UE4-24之后版本" class="headerlink" title="UE4.24之后版本"></a>UE4.24之后版本</h2><p>UE4.24版本开始，PixelStreaming不需要启动WebRTC代理服务器，其工作流程变为了由Signaling和Web服务器充当桥梁，连接UE4应用和Web浏览器。</p>
<p><img src="/2020/04/10/PixelStreaming-Deployment/PixelStreaming4.24.jpg" alt="PixelStreaming4.24" title="4.24 PixelStreaming原理"></p>
<h1 id="局域网部署"><a href="#局域网部署" class="headerlink" title="局域网部署"></a>局域网部署</h1><h2 id="单个实例配置"><a href="#单个实例配置" class="headerlink" title="单个实例配置"></a>单个实例配置</h2><ul>
<li><strong>UE4.24以前版本：</strong></li>
</ul>
<ol>
<li><p>运行WebRTC代理服务器</p>
<p><strong>目录：</strong> <code>\Engine\Source\Programs\PixelStreaming\WebRTCProxy\bin\Start_WebRTCProxy.bat</code></p>
</li>
<li><p>运行SignallingWeb服务器</p>
<p><strong>目录：</strong> <code>\Engine\Source\Programs\PixelStreaming\WebServers\SignallingWebServer\runAWS_WithTURN.bat</code></p>
<p><strong>启动参数：</strong> <code>--publicIp 127.0.0.1（此IP为客户端访问地址，根据情况修改，如公网：--publicIp 49.xx.xx.42）</code></p>
</li>
<li><p>运行应用程序实例</p>
<p><strong>目录：</strong> <code>WindowsNoEditor/PixelStreamingDemo.exe</code></p>
<p><strong>启动参数：</strong> <code>-AudioMixer -PixelStreamingPort=8124 -RenderOffScreen</code></p>
</li>
<li><p>客户端使用支持WebRTC协议的浏览器（Google Chrome、Mozilla Firefox、Apple Safari）访问网页链接</p>
<p><a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> (此IP为启动SignallingWebServer时设置的publicIp值)</p>
</li>
</ol>
<ul>
<li><strong>UE4.24之后版本：</strong></li>
</ul>
<ol>
<li><p>运行SignallingWeb服务器</p>
<p><strong>目录：</strong> <code>\Engine\Source\Programs\PixelStreaming\WebServers\SignallingWebServer\runAWS_WithTURN.bat</code></p>
</li>
<li><p>运行应用程序实例（PixelStreamingIP为客户端访问地址，根据情况修改，如公网：-PixelStreamingIP=49.xx.xx.42）</p>
<p><strong>目录：</strong> <code>/WindowsNoEditor/PixelStreamingDemo.exe</code></p>
<p><strong>启动参数：</strong> <code>-PixelStreamingIP=127.0.0.1 -PixelStreamingPort=8888 -AudioMixer -RenderOffScreen</code></p>
</li>
<li><p>客户端使用支持WebRTC协议的浏览器（Google Chrome、Mozilla Firefox、Apple Safari）访问网页链接</p>
<p><a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> (此IP为运行应用程序实例时设置的PixelStreamingIP)</p>
</li>
</ol>
<p><strong>相关参数说明：</strong></p>
<p>** 待更新 **</p>
<h2 id="多个实例配置"><a href="#多个实例配置" class="headerlink" title="多个实例配置"></a>多个实例配置</h2><ul>
<li><strong>UE4.24之后版本：</strong></li>
</ul>
<ol>
<li><p>启动Matchmaker/run.bat</p>
<p><strong>启动参数</strong>（默认为90/9999，启动时可不加参数）： <code>--httpPort 90 --matchmakerPort 9999</code></p>
</li>
<li><p>启动SignallingWebServer_run.bat</p>
<p><strong>启动参数</strong>（streamerPort=8888为默认）：</p>
<p><strong>[服务器1]</strong> <code>--UseMatchmaker true --matchmakerAddress 127.0.0.1 --matchmakerPort 9999 --publicIp 127.0.0.1 --httpPort 80 --streamerPort = 8888</code></p>
<p><strong>[服务器2]</strong> <code>--UseMatchmaker true --matchmakerAddress 127.0.0.1 --matchmakerPort 9999 --publicIp 127.0.0.1 --httpPort 81 --streamerPort = 8887</code></p>
</li>
<li><p>启动PixelStreaming.exe应用程序实例</p>
<p><strong>启动参数：</strong></p>
<p><strong>[实例1]</strong> <code>-PixelStreamingIP=127.0.0.1 -PixelStreamingPort=8888 -AudioMixer -RenderOffScreen</code></p>
<p><strong>[实例2]</strong> <code>-PixelStreamingIP=127.0.0.1 -PixelStreamingPort=8887 -AudioMixer -RenderOffScreen</code></p>
</li>
<li><p>客户端使用支持WebRTC协议的浏览器（Google Chrome、Mozilla Firefox、Apple Safari）<strong>直接浏览</strong> <a href="http://127.0.0.1:90" target="_blank" rel="noopener">http://127.0.0.1:90</a> ，Matchmaker将自动分配端口，从而单独浏览实例。或者<strong>分别访问</strong>网页链接：</p>
<p><strong>[网址1]</strong> <a href="http://127.0.0.1/MakeReal3DCloud.htm" target="_blank" rel="noopener">http://127.0.0.1:80</a></p>
<p><strong>[网址2]</strong> <a href="http://127.0.0.1:81" target="_blank" rel="noopener">http://127.0.0.1:81</a></p>
<p>即可多人浏览单独的PixelStreaming应用程序实例。</p>
</li>
</ol>
<h1 id="公有云部署"><a href="#公有云部署" class="headerlink" title="公有云部署"></a>公有云部署</h1><h2 id="云服务器环境配置"><a href="#云服务器环境配置" class="headerlink" title="云服务器环境配置"></a>云服务器环境配置</h2><blockquote>
<p> 以华为云为例，其他云平台情况大致相同，腾讯云、阿里云可以直接运行像素流送实例，可省略部分步骤。</p>
</blockquote>
<ul>
<li><p><strong>云服务器系统信息：</strong><br>DirectX版本: DirectX 11<br>CPU: Intel(R) Xeon(R) CPU E5-2697 v4 @ 2.30GHz (16 CPUs), ~2.3GHz<br>GPU: NVIDIA Tesla M60 </p>
</li>
<li><p>防火墙设置</p>
<p>默认防火墙设置可能会禁止像素流所用到的端口的通信。<strong>快速测试时，</strong>在控制面板 &gt;&gt; 防火墙设置中先关闭防火墙。<strong>正式使用时，</strong>应该在高级防火墙设置中，创建相应的规则，将需要使用的协议或者端口打开，也可以将像素流应用及其他相关应用都加入到白名单中去。</p>
<img src="/2020/04/10/PixelStreaming-Deployment/Firewall.jpg" alt="防火墙设置" style="zoom:40%;">
</li>
<li><p>安装.NET Framework3.5</p>
<p>cmd命令行 &gt;&gt; 输入servermanager &gt;&gt; 回车 &gt;&gt; 选择管理&gt;&gt;添加角色和功能 &gt;&gt; Next &gt;&gt; 功能 &gt;&gt; 选择.NET Framework3.5 &gt;&gt; 点击安装</p>
<img src="/2020/04/10/PixelStreaming-Deployment/NETFramework3.5.jpg" alt="NET Framework3.5安装" style="zoom:30%;">
</li>
<li><p>启动声音服务</p>
<p>cmd命令行 &gt;&gt; services.msc &gt;&gt; 将Windows Audio以及Windows Audio Endpoint Builder服务启动</p>
<img src="/2020/04/10/PixelStreaming-Deployment/AudioService.jpg" alt="启动声音服务" style="zoom:40%;">
</li>
<li><p>设置远程桌面链接远程音频</p>
<img src="/2020/04/10/PixelStreaming-Deployment/RemoteAudio.jpg" alt="远程音频" style="zoom:40%;">
</li>
<li><p>关闭IE的安全配置</p>
<p>Windows Server 默认设置是不允许从浏览器下载内容的，所以要通过浏览器下载任何软件，你需要先在ServerManager里关闭IE Enhanced Security Configuration。当然安全起见，当下载完需要的软件后，还是建议重新启用以增强系统的安全性。</p>
<img src="/2020/04/10/PixelStreaming-Deployment/IEConfig.jpg" alt="IE安全配置" style="zoom:30%;">

</li>
</ul>
<h2 id="PixelStreaming环境配置"><a href="#PixelStreaming环境配置" class="headerlink" title="PixelStreaming环境配置"></a>PixelStreaming环境配置</h2><h3 id="必要环境配置"><a href="#必要环境配置" class="headerlink" title="必要环境配置"></a>必要环境配置</h3><ol>
<li>安装Node.js</li>
<li>安装Unreal Engine4.24</li>
</ol>
<h3 id="vGPU驱动"><a href="#vGPU驱动" class="headerlink" title="vGPU驱动"></a>vGPU驱动</h3><blockquote>
<p><strong>云服务器运行Unreal Engine4.24 PixelStreaming实例必须安装vGPU/GRID驱动</strong><br><strong>其他云平台默认预装了vGPU/GRID最新驱动，无需后续步骤。</strong><br><strong>后续步骤为华为云服务器上GRID/vGPU驱动的安装步骤，安装此驱动是为了解决云服务器运行Unreal Engine4.24 PixelStreaming应用程序实例时，有NvEnc的相关报错。运行4.21版本的像素流送应用程序实例无此问题。</strong></p>
</blockquote>
<img src="/2020/04/10/PixelStreaming-Deployment/NvEncError.jpg" alt="NvEnc Error" style="zoom:60%;">

<ol>
<li><p>安装华为云提供的NVIDIA驱动</p>
<p>华为云Window公共镜像中有该驱动的安装文件，文件目录C:\NVIDIA\369.71，点击Setup.exe安装即可。<strong>此步骤是为了先安装，后更新。直接安装来自NVIDIA License Dashboard下载的GRID/vGPU最新驱动，会安装失败。</strong></p>
<img src="/2020/04/10/PixelStreaming-Deployment/vGPU369.jpg" alt="华为云提供的vGPU驱动版本安装" style="zoom:50%;">
</li>
</ol>
<ul>
<li><strong>步骤2、3只为了下载到vGPU/GRID最新驱动，若有其他方式获取到GRID最新驱动软件包可忽略此步骤</strong></li>
</ul>
<ol start="2">
<li><p>申请GRID/vGPU驱动License</p>
<p>有申请License的步骤是因为，我只知道这一种获取最新的驱动软件包的方式，就是通过申请License的方式获得NVIDIA邮件提供的链接，进入License Dashboard下载。</p>
<p><a href="https://enterpriseproductregistration.nvidia.com/?LicType=EVAL&ProductFamily=vGPU" target="_blank" rel="noopener">NVIDIA官网申请GRID驱动的免费License</a> （申请需要企业邮箱）</p>
<p><strong>重要说明：</strong> N卡的图形功能不需要License，仅计算功能需要License，PixelStreaming只用到视频编码，不需要计算功能，所以没必要配置License。在这之前我并不知道这一点，所以走了很多弯路。虽然对于PixelStreaming来说不需要，不过关于获取vGPU/GRID驱动 License、安装License Server、配置License等详细步骤以及问题解决我将会在另一篇文章说明，提供给有需要的朋友参考。</p>
</li>
<li><p>更新GRID vGPU驱动</p>
<p>通过License申请成功的邮件所提供的链接<a href="https://ui.licensing.nvidia.com" target="_blank" rel="noopener">NVIDIA License仪表盘</a> ，下载到vGPU/GRID驱动最新的软件包，如”NVIDIA-GRID-Windows-418.130-426.52.zip“，安装更新即可。</p>
</li>
<li><p>到此，运行Unreal Engine4.24 PixelStreaming应用程序实例，运行正常，没有报错。</p>
</li>
</ol>
<h2 id="单个实例配置-1"><a href="#单个实例配置-1" class="headerlink" title="单个实例配置"></a>单个实例配置</h2><ol>
<li><p>启动STUN服务 Start_STUNServer.bat</p>
<p><strong>目录：</strong> <code>\Engine\Source\ThirdParty\WebRTC\rev.23789\programs\Win64\VS2017\release\Start_STUNServer.bat</code></p>
</li>
<li><p>启动Signalling和Web服务器 runAWS.bat</p>
<p><strong>目录：</strong> <code>\Engine\Source\Programs\PixelStreaming\WebServers\SignallingWebServer\runAWS.bat</code></p>
</li>
<li><p>启动应用程序实例，具体启动参数参考局域网部署步骤。</p>
</li>
</ol>
<blockquote>
<p>如果上述步骤Web浏览器无法查看视频流送，则换用TURN服务部署方法。</p>
</blockquote>
<ol>
<li><p>启动TURN服务 Start_AWS_TURNServer.bat</p>
<p><strong>目录：</strong> <code>\Source\ThirdParty\WebRTC\rev.23789\programs\Win64\VS2017\release\Start_AWS_TURNServer.bat</code></p>
</li>
<li><p>启动Signalling和Web服务器 runAWS_WithTURN.bat</p>
<p><strong>目录：</strong> <code>\Engine\Source\Programs\PixelStreaming\WebServers\SignallingWebServer\runAWS_WithTURN.bat</code></p>
</li>
<li><p>启动应用程序，具体启动参数参考局域网部署步骤。</p>
</li>
</ol>
<h2 id="多个实例配置-1"><a href="#多个实例配置-1" class="headerlink" title="多个实例配置"></a>多个实例配置</h2><ol>
<li><p>启动Start_AWS_TURNServer.bat</p>
</li>
<li><p>启动Matchmaker/run.bat</p>
<p><strong>启动参数</strong>（默认为90/9999，启动时可不加参数）：</p>
<p><code>--httpPort 90 --matchmakerPort 9999</code></p>
</li>
<li><p>启动SignallingWebServer/runAWS_WithTURN.bat</p>
<p><strong>启动参数</strong>（streamerPort=8888为默认）：</p>
<p><strong>[服务器1]</strong> <code>--UseMatchmaker true --matchmakerAddress 127.0.0.1 --matchmakerPort 9999 --publicIp 127.0.0.1 --httpPort 80 --streamerPort = 8888</code></p>
<p><strong>[服务器2]</strong> <code>--UseMatchmaker true --matchmakerAddress 127.0.0.1 --matchmakerPort 9999 --publicIp 127.0.0.1 --httpPort 81 --streamerPort = 8887</code></p>
<ul>
<li><p>云服务器上，参数UseMatchmaker 不起作用，需要修改config.json文件，将UseMatchmaker改为True：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"UseFrontend"</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">"UseMatchmaker"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">"UseHTTPS"</span>: <span class="literal">false</span>,</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在云服务器上，参数httpPort 、streamerPort 也不起作用，修改cirrus.js对应的参数即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> httpPort = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">var</span> streamerPort = <span class="number">8888</span>; <span class="comment">// port to listen to Streamer connections</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需将SignallingWebServer文件夹复制多份，作相应配置。</p>
</li>
</ul>
</li>
<li><p>启动PixelStreaming.exe应用程序实例</p>
<p><strong>启动参数：</strong></p>
<p><strong>[实例1]</strong> <code>-PixelStreamingIP=127.0.0.1 -PixelStreamingPort=8888 -AudioMixer -RenderOffScreen</code></p>
<p><strong>[实例2]</strong> <code>-PixelStreamingIP=127.0.0.1 -PixelStreamingPort=8887 -AudioMixer -RenderOffScreen</code></p>
</li>
<li><p>客户端使用支持WebRTC协议的浏览器（Google Chrome、Mozilla Firefox、Apple Safari）<strong>直接浏览</strong><a href="http://127.0.0.1:90" target="_blank" rel="noopener">http://127.0.0.1:90</a> ，Matchmaker将自动分配端口，从而单独浏览实例。或者<strong>分别访问</strong>网页链接</p>
<p><strong>[网址1]</strong> <a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a></p>
<p><strong>[网址2]</strong> <a href="http://127.0.0.1:81" target="_blank" rel="noopener">http://127.0.0.1:81</a></p>
<p>即可多人浏览单独的PixelStreaming应用程序实例。</p>
</li>
</ol>
<hr>
<p><strong>参考资料</strong></p>
<p><a href="https://docs.unrealengine.com/en-US/Platforms/PixelStreaming/index.html" target="_blank" rel="noopener">Unreal Engine Docs: Platform Development_Pixel Streaming</a></p>
<p><a href="https://www.unrealengine.com/zh-CN/tech-blog/how-to-deploy-ue4-pixel-streaming-on-public-cloud" target="_blank" rel="noopener">Unreal Engine Blog: UE4像素流应用在公有云上的快速部署指南_周澄清</a></p>
<hr>
]]></content>
      <categories>
        <category>Unreal Engine</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>PixelStreaming</tag>
        <tag>云渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 2019 编译 UE4.24 源码不通过问题解决</title>
    <url>/2020/07/06/VS2019-Compile-UE4-Source-Code-Error/</url>
    <content><![CDATA[<h1 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h1><ul>
<li><strong>找不到头文件typeinfo</strong></li>
</ul>
<p>使用 Visual Studio 2019 编译 UE4.24源码时报错，PhysX库编译不通过，具体报错信息为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="string">"D:\UnrealEngine\Engine\Source\ThirdParty\PhysX3\PxShared\src\foundation\include\PsAllocator.h"</span>：</span><br><span class="line">typeinfo.h: No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>对于此类报错，Microsoft开发者回复是MSVC14.23版本移除了typeinfo.h，改用<typeinfo>即可，VS2019安装信息显示已安装MSVC14.26，显然MSVC4.23以后都有此问题。按其建议修改后，仍会有其他编译错误。而且修改源码的方式不太友好。</typeinfo></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li><strong>修改引擎配置文件</strong></li>
</ul>
<ol>
<li><p>使用VS2019的Installer，安装MSVC4.23版本以前的运行库，如MSVC14.22.27905。</p>
</li>
<li><p>修改UE4源码的配置文件: <code>&quot;D:\UnrealEngine\Engine\Saved\UnrealBuildTool\BuildConfiguration.xml&quot;</code><br>添加以下代码：</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WindowsPlatform</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">CompilerVersion</span>&gt;</span>14.22.27905<span class="tag">&lt;/<span class="name">CompilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">WindowsPlatform</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后BuildConfiguration.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">xmlns</span>=<span class="string">"https://www.unrealengine.com/BuildConfiguration"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">WindowsPlatform</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">CompilerVersion</span>&gt;</span>14.22.27905<span class="tag">&lt;/<span class="name">CompilerVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">WindowsPlatform</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Generate后编译即可。</li>
</ol>
<h1 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h1><ul>
<li><strong>error C4800</strong></li>
</ul>
<p>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\INCLUDE\comip.h(311): error C4800</p>
<h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li><strong>修改引擎源码</strong></li>
</ul>
<p>cs文件： <code>.\Engine\Source\Programs\UnrealBuildTool\Platform\Windows\VCToolChain.cs</code> </p>
<p>第514行之后加一句 <code>Arguments.Add(&quot;/wd4800&quot;);</code> </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AppendCLArguments_CPP</span>(<span class="params">CppCompileEnvironment CompileEnvironment, List&lt;<span class="keyword">string</span>&gt; Arguments</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target.WindowsPlatform.Compiler != WindowsCompiler.Clang)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Explicitly compile the file as C++.</span></span><br><span class="line">		Arguments.Add(<span class="string">"/TP"</span>);</span><br><span class="line">        Arguments.Add(<span class="string">"/wd4800"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	    ...</span><br></pre></td></tr></table></figure>

<p>最后Generate后编译即可。</p>
<hr>
<p>参考链接</p>
<p><a href="https://blog.csdn.net/sajiazaici/article/details/102911466/" target="_blank" rel="noopener">UE4导入插件后编译无法通过，提示缺少typeinfo.h</a></p>
<p><a href="https://blog.csdn.net/weixin_43030629/article/details/104947160" target="_blank" rel="noopener">UE4源码编译错误处理，error MSB3075，error C4800</a></p>
<hr>
]]></content>
      <categories>
        <category>Unreal Engine</category>
      </categories>
      <tags>
        <tag>UE4</tag>
        <tag>Visual Studio 2019</tag>
        <tag>编译问题</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo+NexT搭建个人网站全流程及魔改记录</title>
    <url>/2020/04/20/GitHub-Hexo-PersonalWebsite/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇是关于利用GitHub Pages服务，使用Hexo框架以及NexT主题搭建个人网站的全流程的记录，本着高效工作的原则做了一些自定义修改来优化个人网站。</p>
<a id="more"></a>

<p>– 持续更新 –</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>GitHub Pages：一项静态站点托管服务</p>
<p>Hexo：一个高效的博客框架</p>
<p>NexT：一个简约风格的网站主题</p>
<p>GitHub提供了 <code>.github.io</code> 域，省去了自已去购买域名的金钱和精力。</p>
<h1 id="Hexo开始使用"><a href="#Hexo开始使用" class="headerlink" title="Hexo开始使用"></a>Hexo开始使用</h1><ol>
<li><p>创建远程仓库。注册GitHub账号，创建仓库，仓库命名为：用户名+ .github.io 后缀， <code>username.github.io</code></p>
</li>
<li><p>本地安装Git、NodeJS</p>
</li>
<li><p>安装Hexo。创建用来部署博客网站的文件夹，如 <code>D:\zhangypcn</code> ，安装Hexo，并初始化网站</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装Hexo</span></span><br><span class="line">npm install -g hexo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在当前文件夹初始化一个网站，也可以指定项目名：` hexo i blog `</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务器，默认情况下，访问网址为： http://localhost:4000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以指定端口启动服务 hexo s -p 5000</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<ul>
<li>本地测试</li>
</ul>
<img src="/2020/04/20/GitHub-Hexo-PersonalWebsite/Test.png" alt="Test" style="zoom:33%;">
</li>
<li><p>一键部署网站到远程仓库</p>
<ul>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开站点配置文件 <code>_config.yml</code> ，目录 <code>&quot;D:\zhangypcn\hexo\_config.yml&quot;</code> ，修改deploy字段，其repo项设置为远程仓库URL，branch项设置为master</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment">## repo：仓库（Repository）地址</span></span><br><span class="line"><span class="comment">## branch：分支名称</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:zhangypcn/zhangypcn.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成站点文件并推送至远程库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 执行 hexo clean 时，Hexo会清除缓存文件 (db.json) 和已生成的静态文件 (public)；</span><br><span class="line">// 执行 hexo generate时，Hexo会在 public 目录下生成网站静态文件；</span><br><span class="line">// 执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中</span><br><span class="line">// 指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在就可以通过仓库名作为域名来访问网站，如： <code>https://username.github.io</code> </p>
</li>
</ul>
</li>
</ol>
<h1 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h1><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol>
<li><p>下载主题至 Hexo 站点目录的themes文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开站点配置文件 <code>_config.yml</code> ，目录 <code>&quot;D:\zhangypcn\hexo\_config.yml&quot;</code> ，修改 theme 字段，设置为 next</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h2><ul>
<li><p>打开 <strong>主题配置文件</strong>，目录 <code>&quot;D:\zhangypcn\hexo\themes\next\_config.yml&quot;</code> ，修改 Schemes 字段，设置喜欢的风格</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Next主题可选样式</span></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">## Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span></span><br><span class="line"><span class="comment">## Mist - Muse 的紧凑版本，整洁有序的单栏外观</span></span><br><span class="line"><span class="comment">## Pisces - 双栏 Scheme，小家碧玉似的清新</span></span><br><span class="line"><span class="comment"># scheme: MUSE</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><ul>
<li><p>打开 <strong>站点配置文件</strong> <code>_config.yml</code> ，目录 <code>&quot;D:\zhangypcn\hexo\_config.yml&quot;</code> ，修改 <code>language</code> 字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>目前 NexT 支持的语言如以下表格所示：</p>
<table>
<thead>
<tr>
<th align="left">语言</th>
<th align="left">代码</th>
<th align="left">设定示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">English</td>
<td align="left"><code>en</code></td>
<td align="left"><code>language: en</code></td>
</tr>
<tr>
<td align="left">简体中文</td>
<td align="left"><code>zh-Hans</code></td>
<td align="left"><code>language: zh-Hans</code></td>
</tr>
<tr>
<td align="left">Français</td>
<td align="left"><code>fr-FR</code></td>
<td align="left"><code>language: fr-FR</code></td>
</tr>
<tr>
<td align="left">Português</td>
<td align="left"><code>pt</code></td>
<td align="left"><code>language: pt</code> or <code>language: pt-BR</code></td>
</tr>
<tr>
<td align="left">繁體中文</td>
<td align="left"><code>zh-hk</code> 或者 <code>zh-tw</code></td>
<td align="left"><code>language: zh-hk</code></td>
</tr>
<tr>
<td align="left">Русский язык</td>
<td align="left"><code>ru</code></td>
<td align="left"><code>language: ru</code></td>
</tr>
<tr>
<td align="left">Deutsch</td>
<td align="left"><code>de</code></td>
<td align="left"><code>language: de</code></td>
</tr>
<tr>
<td align="left">日本語</td>
<td align="left"><code>ja</code></td>
<td align="left"><code>language: ja</code></td>
</tr>
<tr>
<td align="left">Indonesian</td>
<td align="left"><code>id</code></td>
<td align="left"><code>language: id</code></td>
</tr>
<tr>
<td align="left">Korean</td>
<td align="left"><code>ko</code></td>
<td align="left"><code>language: ko</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h2><blockquote>
<p>新版本菜单内容的设置格式是： <code>Key: /link/||icon</code><br>其中 <code>Key</code> 是菜单项的默认名称，将用于匹配图标和翻译，如果此菜单的翻译可以在语言中找到，将加载此翻译；<code>link</code> 为目标链接； <code>icon</code> 为菜单项对应的图标/ <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 图标的名称。</p>
</blockquote>
<ol>
<li><p>设置菜单内容，打开 <strong>主题配置文件</strong>，目录 <code>&quot;D:\zhangypcn\hexo\themes\next\_config.yml&quot;</code> ，修改 menu 字段。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主菜单</span></span><br><span class="line"><span class="string">menu</span> </span><br><span class="line">  <span class="comment">#注意||前后不要留空格，否则会加载至404页面</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/||tags</span></span><br><span class="line">  <span class="attr">Portfolio:</span> <span class="string">/Portfolio/||plug</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启用菜单图标，打开主题配置文件，修改 <code>menu_icon</code> 字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置菜单项的显示文本。打开 NexT 主题目录下的 <code>languages/{language}.yml</code> 文件，（<code>{language}</code> 为网站所使用的语言）。以简体中文为例，若你需要添加一个菜单项，,则需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加该项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">Portfolio:</span> <span class="string">作品</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建菜单项目标文件。使用新建页面指令， <code>key_name</code> 为菜单项及页面名称，没有对应页面，点击菜单打开后为404页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 新建菜单项页面</span><br><span class="line">hexo new page key_name</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h2><ol>
<li><p>设置侧栏的位置，打开 <strong>主题配置文件</strong>，修改 <code>sidebar.position</code> 字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position, available value: left | right (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置侧栏显示的时机，打开 <strong>主题配置文件</strong>，修改 <code>sidebar.display</code> 字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Display, available value (only for Muse | Mist):</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  Totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><ul>
<li><p>打开 <strong>主题配置文件</strong>，修改字段 <code>avatar</code> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/images/custom/zhang.png</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="网站其他设置"><a href="#网站其他设置" class="headerlink" title="网站其他设置"></a>网站其他设置</h1><ul>
<li><p>打开 <strong>站点配置文件</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。使用半角逗号 <code>,</code> 分隔多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用电脑的时区。其他时区如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="主题其他设置"><a href="#主题其他设置" class="headerlink" title="主题其他设置"></a>主题其他设置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 友情链接</span></span><br><span class="line">Links </span><br><span class="line"><span class="meta">#</span><span class="bash"> 建站时间</span></span><br><span class="line">since</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加文章更新时间</span></span><br><span class="line">updated_at</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加站点访问统计</span></span><br><span class="line">busuanzi_count</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加社交账号</span></span><br><span class="line">social</span><br></pre></td></tr></table></figure>

<h1 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h1><ul>
<li><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new 'my-blog'</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>文章在首页显示 <code>阅读全文</code>  效果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 在文章合适的位置添加</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文章添加标题、更新时间、分类、版权声明、标签和其他属性，在文章开头添加以下内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: GitHub+Hexo+NexT搭建个人网站全流程及魔改记录</span><br><span class="line">date: 2020-04-20 14:00:00</span><br><span class="line">categories: Hexo</span><br><span class="line">copyright: true</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">	- </span>GitHub Pages</span><br><span class="line"><span class="bullet">	- </span>Hexo</span><br><span class="line"><span class="bullet">	- </span>NexT</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<h1 id="文章版权声明"><a href="#文章版权声明" class="headerlink" title="文章版权声明"></a>文章版权声明</h1><h2 id="添加版权声明"><a href="#添加版权声明" class="headerlink" title="添加版权声明"></a>添加版权声明</h2><ol>
<li><p>修改主题配置文件，关键词：post_copyright，设置 enable 为 true </p>
<p><strong>目录：</strong> <code>.\yourWebsiteRootDir\themes\next\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-creative-commons"&gt;&lt;/i&gt;</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>修改站点配置文件，关键词：url，设置 url 为主页地址</p>
<p><strong>目录：</strong> <code>.\yourWebsiteRootDir\_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://zhangypcn.github.io</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="自定义版权声明"><a href="#自定义版权声明" class="headerlink" title="自定义版权声明"></a>自定义版权声明</h2><h3 id="自定义是否添加版权声明"><a href="#自定义是否添加版权声明" class="headerlink" title="自定义是否添加版权声明"></a>自定义是否添加版权声明</h3><ol>
<li><p>修改post-copyright.swig文件，添加文章是否开启版权声明的判断</p>
<p><strong>目录</strong> <code>&quot;.\yourWebsiteRootDir\themes\next\layout\_macro\post-copyright.swig&quot;</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">if</span> <span class="string">page.copyright</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&lt;div&gt;</span>    </span><br><span class="line">    <span class="string">&#123;%</span> <span class="string">if</span> <span class="string">not</span> <span class="string">is_index</span> <span class="string">%&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">···</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改后：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">if</span> <span class="string">page.copyright</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&lt;div&gt;</span>    </span><br><span class="line">    <span class="string">&#123;%</span> <span class="string">if</span> <span class="string">not</span> <span class="string">is_index</span> <span class="string">%&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="string">&lt;ul</span> <span class="string">class="post-copyright"&gt;</span></span><br><span class="line">        <span class="string">&lt;li</span> <span class="string">class="post-copyright-author"&gt;</span></span><br><span class="line">          <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__('post.copyright.author')</span> <span class="string">+</span> <span class="string">__('symbol.colon')</span> <span class="string">&#125;&#125;&lt;/strong&gt;</span></span><br><span class="line">          <span class="string">&#123;&#123;</span> <span class="string">post.author</span> <span class="string">|</span> <span class="string">default(config.author)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="string">&lt;/li&gt;</span></span><br><span class="line">        <span class="string">&lt;li</span> <span class="string">class="post-copyright-link"&gt;</span></span><br><span class="line">          <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__('post.copyright.link')</span> <span class="string">+</span> <span class="string">__('symbol.colon')</span> <span class="string">&#125;&#125;&lt;/strong&gt;</span></span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="&#123;&#123;</span> <span class="string">post.url</span> <span class="string">|</span> <span class="string">default(post.permalink)</span> <span class="string">&#125;&#125;"</span> <span class="string">title="&#123;&#123;</span> <span class="string">post.title</span> <span class="string">&#125;&#125;"&gt;&#123;&#123;</span> <span class="string">post.url</span> <span class="string">|</span> <span class="string">default(post.permalink)</span> <span class="string">&#125;&#125;&lt;/a&gt;</span></span><br><span class="line">        <span class="string">&lt;/li&gt;</span></span><br><span class="line">        <span class="string">&lt;li</span> <span class="string">class="post-copyright-license"&gt;</span></span><br><span class="line">          <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__('post.copyright.license_title')</span> <span class="string">+</span> <span class="string">__('symbol.colon')</span> <span class="string">&#125;&#125;</span> <span class="string">&lt;/strong&gt;</span></span><br><span class="line">          <span class="string">&#123;&#123;</span> <span class="string">__('post.copyright.license_content',</span> <span class="string">theme.post_copyright.license_url,</span> <span class="string">theme.post_copyright.license)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="string">&lt;/li&gt;</span></span><br><span class="line">      <span class="string">&lt;/ul&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文章添加前置内容copyright，若不需要版权声明，则设置为false，或者不加此项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">XXX</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-20</span> <span class="number">14</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></p>
<p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
